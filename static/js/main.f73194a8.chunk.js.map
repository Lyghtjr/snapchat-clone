{"version":3,"sources":["features/appSlice.js","features/cameraSlice.js","firebase.js","components/Chat.js","components/Chats.js","components/ChatView.js","components/Login.js","components/Preview.js","components/WebcamCapture.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","user","selectedImage","reducers","login","state","action","payload","logout","selectImage","resetImage","actions","selectUser","app","selectSelectedImage","cameraSlice","cameraImage","setCameraImage","resetCameraImage","selectCameraImage","camera","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","Chat","id","username","timestamp","read","imageUrl","profilePic","dispatch","useDispatch","history","useHistory","onClick","collection","doc","set","merge","push","className","Avatar","src","date","Date","toDate","toUTCString","StopRounded","Chats","useState","posts","setPosts","useSelector","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","signOut","SearchOutlined","placeholder","type","ChatBubble","RadioButtonUnchecked","fontSize","ChatView","exit","replace","alt","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","then","result","displayName","photoURL","uid","catch","error","alert","message","Preview","Close","TextFields","CreateOutlined","Note","MusicNote","AttachFile","Crop","Timer","uuid","ref","putString","on","console","log","child","getDownloadURL","url","add","FieldValue","serverTimestamp","Send","videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","useRef","capture","useCallback","imageSrc","current","getScreenshot","audio","screenshotFormat","App","onAuthStateChanged","authUser","exact","path","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"maAEaA,EAAWC,YAAY,CAClCC,KAAM,MACNC,aAAa,CACXC,KAAK,KACLC,cAAc,MAGhBC,SAAU,CACJC,MAAO,SAACC,EAAOC,GACjBD,EAAMJ,KAAOK,EAAOC,SAEtBC,OAAS,SAACH,GACRA,EAAMJ,KAAO,MAEfQ,YAAY,SAACJ,EAAMC,GACjBD,EAAMH,cAAgBI,EAAOC,SAE/BG,WAAW,SAACL,GACVA,EAAMH,cAAe,SAKpB,EAAgDL,EAASc,QAAjDP,EAAR,EAAQA,MAAMI,EAAd,EAAcA,OAAOC,EAArB,EAAqBA,YAEfG,GAFN,EAAiCF,WAEd,SAACL,GAAD,OAAWA,EAAMQ,IAAIZ,OAElCa,EAAsB,SAACT,GAAD,OAAWA,EAAMQ,IAAIX,eAEzCL,IAAf,QC7BakB,EAAcjB,YAAY,CACrCC,KAAM,SACNC,aAAa,CACXgB,YAAY,MAGdb,SAAU,CACRc,eAAgB,SAACZ,EAAOC,GACtBD,EAAMW,YAAcV,EAAOC,SAE7BW,iBAAiB,SAACb,GACdA,EAAMW,YAAc,SAKrB,EAA6CD,EAAYJ,QAAjDM,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,iBAGlBC,EAAmB,SAACd,GAAD,OAAWA,EAAMe,OAAOJ,aAEzCD,IAAf,Q,QCXQM,EADcC,IAASC,cATR,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAIcC,YACjBC,EAAMT,IAASS,OACfC,EAAUV,IAASU,UACnBC,EAAW,IAAIX,IAASS,KAAKG,mB,uCCoBtBC,EAzBF,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,GAAGC,EAAiD,EAAjDA,SAASC,EAAwC,EAAxCA,UAAUC,EAA8B,EAA9BA,KAAKC,EAAyB,EAAzBA,SAASC,EAAgB,EAAhBA,WAC7CC,EAAWC,cACXC,EAAUC,cAWZ,OACI,sBAAKC,QAXI,WACLP,IACAG,EAASjC,EAAY+B,IACrBnB,EAAG0B,WAAW,SAASC,IAAIZ,GAAIa,IAAI,CAC/BV,MAAK,GACP,CAACW,OAAM,IACTN,EAAQO,KAAK,iBAKGC,UAAU,OAA9B,UACI,cAACC,EAAA,EAAD,CAAQD,UAAU,cAAcE,IAAKb,IACrC,sBAAKW,UAAU,YAAf,UACI,6BAAKf,IACL,+BAAME,GAAQ,iBAAd,IAAgC,cAAC,IAAD,CAAcgB,KAAO,IAAIC,KAAJ,OAASlB,QAAT,IAASA,OAAT,EAASA,EAAWmB,UAAUC,uBAErFnB,GAAQ,cAACoB,EAAA,EAAD,CAAaP,UAAU,sBCqC9BQ,EAxDD,WACV,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACM9D,EAAO+D,YAAYpD,GACnB8B,EAAWC,cACXC,EAAUC,cAChBoB,qBAAU,WACN5C,EAAG0B,WAAW,SAASmB,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAAQ,OAAIL,EAASK,EAASC,KAAKC,KAAI,SAAAtB,GAAG,MAAK,CACzGZ,GAAGY,EAAIZ,GACPmC,KAAKvB,EAAIuB,iBAIf,IAMF,OACI,sBAAKnB,UAAU,QAAf,UACI,sBAAKA,UAAU,eAAf,UACI,cAACC,EAAA,EAAD,CAAQC,IAAKrD,EAAKwC,WAAYK,QAAS,kBAAKf,EAAKyC,WAAWpB,UAAU,iBACtE,sBAAKA,UAAU,eAAf,UACI,cAACqB,EAAA,EAAD,CAAgBrB,UAAU,qBAC1B,uBAAOsB,YAAY,UAAUC,KAAK,YAEtC,cAACC,EAAA,EAAD,CAAYxB,UAAU,sBAG1B,qBAAKA,UAAU,cAAf,SAEQU,EAAMQ,KAAI,gBAAElC,EAAF,EAAEA,GAAF,IAAKmC,KACX9B,EADM,EACNA,WAAWJ,EADL,EACKA,SAASC,EADd,EACcA,UAAUE,EADxB,EACwBA,SAASD,EADjC,EACiCA,KADjC,OAGN,cAAC,EAAD,CAEAH,GAAMA,EACNC,SAAYA,EACZC,UAAaA,EACbE,SAAYA,EACZD,KAAQA,EACRE,WAAcA,GANPL,QAYnB,cAACyC,EAAA,EAAD,CACAzB,UAAU,oBACVN,QAnCS,WACbJ,EAASxB,KACT0B,EAAQO,KAAK,MAkCT2B,SAAS,c,QCbNC,G,MAzCE,WACf,IAAM7E,EAAgB8D,YAAYlD,GAC5B8B,EAAUC,cAEhBoB,qBAAU,WACH/D,GACH8E,MAED,CAAC9E,IAEJ,IAAM8E,EAAO,WACXpC,EAAQqC,QAAQ,WAGlB,OACE,sBAAK7B,UAAU,WAAf,UACE,qBAAKE,IAAKpD,EAAegF,IAAI,GAAGpC,QAASkC,IACzC,qBAAK5B,UAAU,iBAAf,SACE,cAAC,uBAAD,CACE+B,WAAS,EACTC,SAAU,GACVC,YAAa,EACbC,KAAM,GACNC,OAAQ,CACN,CAAC,UAAW,MACZ,CAAC,UAAW,MACZ,CAAC,UAAW,OARhB,SAWG,YAAwB,IAArBC,EAAoB,EAApBA,cAIF,OAHsB,IAAlBA,GACFR,IAEKQ,Y,SCVJC,G,MAvBD,WACV,IAAM/C,EAAWC,cAYjB,OACI,qBAAKS,UAAU,QAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKE,IAAI,sDAAsD4B,IAAI,KACnE,cAACQ,EAAA,EAAD,CAAQC,QAAQ,WAAW7C,QAdxB,WACXf,EAAK6D,gBAAgB3D,GAAU4D,MAAK,SAACC,GACjCpD,EAAStC,EAAM,CACXiC,SAASyD,EAAO7F,KAAK8F,YACrBtD,WAAWqD,EAAO7F,KAAK+F,SACvB5D,GAAG0D,EAAO7F,KAAKgG,UAEpBC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAME,aAOtB,4B,kGCqDDC,GAjEC,WACZ,IAAMtF,EAAcgD,YAAY7C,GAC1ByB,EAAUC,cACVH,EAAWC,cACX1C,EAAO+D,YAAYpD,GAEzBqD,qBAAU,WACFjD,GACA4B,EAAQqC,QAAQ,OAEtB,CAACjE,EAAY4B,IAiCf,OACI,sBAAKQ,UAAU,UAAf,UACI,cAACmD,EAAA,EAAD,CAAOnD,UAAU,gBAAgBN,QAjCpB,WACjBJ,EAASxB,QAiCL,sBAAKkC,UAAU,uBAAf,UACI,cAACoD,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,OAGJ,qBAAKxD,IAAKtC,EAAakE,IAAI,KAC3B,sBAAKpC,QAxCI,WACb,IAAMV,EAAK2E,cACQ/E,EAAQgF,IAAR,gBAAqB5E,IAAM6E,UAAUjG,EAAY,YAEzDkG,GAAG,gBAAgB,MAAK,SAACf,GAChCgB,QAAQC,IAAIjB,MAEhB,WACInE,EACCgF,IAAI,SACJK,MAAMjF,GACNkF,iBACAzB,MAAK,SAAC0B,GACHlG,EAAG0B,WAAW,SAASyE,IAAI,CACvBhF,SAAS+E,EACTlF,SAAS,OACTE,MAAK,EACLE,WAAWxC,EAAKwC,WAChBH,UAAUhB,IAASQ,UAAU2F,WAAWC,oBAE5C9E,EAAQqC,QAAQ,iBAoBI7B,UAAU,iBAAlC,UACI,0CACA,cAACuE,EAAA,EAAD,CAAM7C,SAAS,QAAQ1B,UAAU,4B,oBC/D3CwE,I,MAAmB,CACrBC,MAAM,IACNC,OAAO,IACPC,WAAW,SAgCAC,GA7BO,WAClB,IAAMC,EAAYC,iBAAO,MACnBxF,EAAWC,cACXC,EAAUC,cAEVsF,EAAUC,uBACZ,WACE,IAAMC,EAAWJ,EAAUK,QAAQC,gBACnC7F,EAASzB,EAAeoH,IACzBzF,EAAQO,KAAK,cAEd,CAAC8E,IAEL,OACI,sBAAK7E,UAAU,gBAAf,UACI,cAAC,KAAD,CACIoF,OAAO,EACPV,OAAQF,GAAiBE,OACzBd,IAAKiB,EACLQ,iBAAiB,aACjBZ,MAAOD,GAAiBC,MACxBD,iBAAkBA,KAGtB,cAAC/C,EAAA,EAAD,CAAsBzB,UAAU,uBAAuBN,QAASqF,EAASrD,SAAS,cCgC/E4D,OAzDf,WACE,IAAMzI,EAAO+D,YAAYpD,GACnB8B,EAAWC,cAkBjB,OAhBAsB,qBAAU,WACRlC,EAAK4G,oBAAmB,SAACC,GAErBlG,EADEkG,EAEAxI,EAAM,CACJiC,SAAUuG,EAAS7C,YACnBtD,WAAYmG,EAAS5C,SACrB5D,GAAIwG,EAAS3C,MAIRzF,UAGZ,IAGD,qBAAK4C,UAAU,MAAf,SACE,cAAC,IAAD,UACInD,EAGA,qCACE,qBACEmD,UAAU,WACVE,IAAI,0EACJ4B,IAAI,KAEN,qBAAK9B,UAAU,WAAf,SACE,qBAAKA,UAAU,qBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyF,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACE,cAAC,EAAD,gBArBV,cAAC,EAAD,SCjCGC,GAAQC,YAAe,CAClCC,QAAS,CACPpI,IAAKqI,EACL9H,OAAO+H,KCKSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,MAAK,SAACoE,GAClCA,EAAaC,kB","file":"static/js/main.f73194a8.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState:{\n    user:null,\n    selectedImage:null\n  },\n  \n  reducers: {\n        login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout : (state) => {\n      state.user = null;\n    },\n    selectImage:(state,action) => {\n      state.selectedImage = action.payload\n    },\n    resetImage:(state) => {\n      state.selectedImage =null;\n    }\n  },\n});\n\nexport const { login,logout,selectImage,resetImage } = appSlice.actions;\n\nexport const selectUser = (state) => state.app.user;\n\nexport const selectSelectedImage = (state) => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const cameraSlice = createSlice({\n  name: 'camera',\n  initialState:{\n    cameraImage:null,\n  },\n  \n  reducers: {\n    setCameraImage: (state, action) => {\n      state.cameraImage = action.payload;\n    },\n    resetCameraImage:(state) => {\n        state.cameraImage = null;\n    }\n  },\n});\n\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\n\n\nexport const selectCameraImage= (state) => state.camera.cameraImage;\n\nexport default cameraSlice.reducer;\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB4PERXL31j_VKA_P8DyNv0pVBjSFrZ9lg\",\n    authDomain: \"snapchat-clone-v1.firebaseapp.com\",\n    projectId: \"snapchat-clone-v1\",\n    storageBucket: \"snapchat-clone-v1.appspot.com\",\n    messagingSenderId: \"658763905643\",\n    appId: \"1:658763905643:web:305baf603ca237dd710f2e\"\n  };\n  // Initialize Firebase\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n  const auth =firebase.auth();\n  const storage = firebase.storage();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  export {db,auth,storage, provider};\n\n","import { Avatar } from '@material-ui/core';\nimport { StopRounded } from '@material-ui/icons';\nimport React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport ReactTimeago from 'react-timeago';\nimport { selectImage } from '../features/appSlice';\nimport { db } from '../firebase';\nimport '../styles/Chat.css';\n\nconst Chat = ({id,username,timestamp,read,imageUrl,profilePic}) => {\nconst dispatch = useDispatch();\nconst history = useHistory();\n    const open = () => {\n        if(!read){\n            dispatch(selectImage(imageUrl));\n            db.collection('posts').doc(id).set({\n                read:true,\n            },{merge:true});\n            history.push('/chats/view');\n        }\n    }\n\n    return (\n        <div onClick={open} className=\"chat\">\n            <Avatar className=\"chat_avatar\" src={profilePic}/>\n            <div className=\"chat_info\">\n                <h4>{username}</h4>\n                <p>{ !read && 'Tap to view - '} <ReactTimeago date= {new Date(timestamp?.toDate()).toUTCString()}/></p>\n            </div>\n            {!read && <StopRounded className=\"chat_readIcon\"/>}\n        </div>\n    )\n}\n\nexport default Chat\n","import { Avatar } from '@material-ui/core';\nimport { ChatBubble, RadioButtonUnchecked, SearchOutlined } from '@material-ui/icons';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { selectUser } from '../features/appSlice';\nimport { resetCameraImage } from '../features/cameraSlice';\nimport { auth, db } from '../firebase';\nimport '../styles/Chats.css';\nimport Chat from './Chat';\n\nconst Chats = () => {\n    const [posts,setPosts] = useState([]);\n    const user = useSelector(selectUser);\n    const dispatch = useDispatch();\n    const history = useHistory()\n    useEffect(()=>{\n        db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot => setPosts(snapshot.docs.map(doc => ({\n            id:doc.id,\n            data:doc.data()\n        }))\n        )\n        );\n    },[]);\n\n    const takeSnap = () => {\n        dispatch(resetCameraImage());\n        history.push(\"/\")\n    }\n    return (\n        <div className=\"chats\">\n            <div className=\"chats_header\">\n                <Avatar src={user.profilePic} onClick={()=> auth.signOut()} className=\"chats_avatar\"/>\n                <div className=\"chats_search\">\n                    <SearchOutlined className=\"chats_searchIcon\"/>\n                    <input placeholder=\"Friends\" type=\"text\"/>\n                </div>\n                <ChatBubble className=\"chats_chatIcon\"/>\n            </div>\n\n            <div className=\"chats_posts\">\n                {\n                    posts.map(({id,data:{\n                        profilePic,username,timestamp,imageUrl,read }\n                    }) => (\n                        <Chat\n                        key = {id}\n                        id = {id}\n                        username = {username}\n                        timestamp = {timestamp}\n                        imageUrl = {imageUrl}\n                        read = {read}\n                        profilePic = {profilePic}\n                        />\n                    )\n                    )\n                }\n            </div>\n            <RadioButtonUnchecked\n            className=\"chats_takePicIcon\"\n            onClick={takeSnap}\n            fontSize='large'\n            />\n        </div>\n    )\n}\n\nexport default Chats\n","import React, { useEffect } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { selectSelectedImage } from \"../features/appSlice\";\nimport \"../styles/ChatView.css\";\n\nconst ChatView = () => {\n  const selectedImage = useSelector(selectSelectedImage);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!selectedImage) {\n      exit();\n    }\n  }, [selectedImage]);\n\n  const exit = () => {\n    history.replace(\"/chats\");\n  };\n\n  return (\n    <div className=\"chatView\">\n      <img src={selectedImage} alt=\"\" onClick={exit} />\n      <div className=\"chatView_timer\">\n        <CountdownCircleTimer\n          isPlaying\n          duration={10}\n          strokeWidth={6}\n          size={50}\n          colors={[\n            [\"#004777\", 0.333],\n            [\"#F7B801\", 0.333],\n            [\"#A30000\", 0.333],\n          ]}\n        >\n          {({ remainingTime }) => {\n            if (remainingTime === 0) {\n              exit();\n            }\n            return remainingTime;\n          }}\n        </CountdownCircleTimer>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatView;\n","import { Button } from '@material-ui/core';\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { login } from '../features/appSlice';\nimport { auth, provider } from '../firebase';\nimport '../styles/Login.css'\n\nconst Login = () => {\n    const dispatch = useDispatch();\n\n    const signIn = () => {\n        auth.signInWithPopup(provider).then((result) => {\n            dispatch(login({\n                username:result.user.displayName,\n                profilePic:result.user.photoURL,\n                id:result.user.uid,\n            }))\n        }).catch(error => alert(error.message));\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"login_container\">\n                <img src='https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg' alt=''/>\n                <Button variant='outlined' onClick={signIn}>Sign In</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import {  AttachFile, Close, CreateOutlined, Crop, MusicNote, Note, Send, TextFields, Timer } from '@material-ui/icons';\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { resetCameraImage, selectCameraImage } from '../features/cameraSlice';\nimport '../styles/Preview.css';\nimport { v4 as uuid} from \"uuid\";\nimport {db,storage} from '../firebase';\nimport firebase from 'firebase';\nimport { selectUser } from '../features/appSlice';\n\n\nconst Preview = () => {\n    const cameraImage = useSelector(selectCameraImage);\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const user = useSelector(selectUser);\n\n    useEffect(()=>{\n        if(!cameraImage){\n            history.replace('/')\n        }\n    },[cameraImage,history]);\n\n    const closePreview = () => {\n        dispatch(resetCameraImage());\n     \n    }\n\n    const sendPost = () => {\n        const id = uuid();\n        const uploadTask = storage.ref(`posts/${id}`).putString(cameraImage,\"data_url\");\n\n        uploadTask.on('state_changed',null,(error)=>{\n            console.log(error);\n        },\n        () => {\n            storage\n            .ref('posts')\n            .child(id)\n            .getDownloadURL()\n            .then((url)=>{\n                db.collection('posts').add({\n                    imageUrl:url,\n                    username:'Abhi',\n                    read:false,\n                    profilePic:user.profilePic,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp()\n                });\n                history.replace(\"/chats\");\n            })\n        }\n        );\n    }\n\n    return (\n        <div className=\"preview\">\n            <Close className=\"preview_close\" onClick={closePreview}/>\n            <div className=\"preview_toolbarRight\">\n                <TextFields/>\n                <CreateOutlined/>\n                <Note/>\n                <MusicNote/>\n                <AttachFile/>\n                <Crop/>\n                <Timer/>\n\n            </div>\n            <img src={cameraImage} alt=\"\"/>\n            <div onClick={sendPost} className=\"preview_footer\">\n                <h2>Send Now</h2>\n                <Send fontSize=\"small\" className=\"preview_sendIcon\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Preview\n","import {  RadioButtonUnchecked } from '@material-ui/icons';\nimport React, { useRef , useCallback, useState } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Webcam from 'react-webcam'\nimport { setCameraImage } from '../features/cameraSlice';\nimport '../styles/WebcamCapture.css';\n\nconst videoConstraints = {\n    width:250,\n    height:400,\n    facingMode:\"user\",\n}\n\nconst WebcamCapture = () => {\n    const webcamRef = useRef(null);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    \n    const capture = useCallback(\n        () => {\n          const imageSrc = webcamRef.current.getScreenshot();\n          dispatch(setCameraImage(imageSrc));\n         history.push('/preview');\n        },\n        [webcamRef],\n    )\n    return (\n        <div className=\"webcamCapture\">\n            <Webcam\n                audio={false}\n                height={videoConstraints.height}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                width={videoConstraints.width}\n                videoConstraints={videoConstraints}\n            />\n\n            <RadioButtonUnchecked className=\"webcamCapture_button\" onClick={capture} fontSize=\"large\"/>\n        </div>\n    )\n}\n\nexport default WebcamCapture\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Chats from \"./components/Chats\";\nimport ChatView from \"./components/ChatView\";\nimport Login from \"./components/Login\";\nimport Preview from \"./components/Preview\";\nimport WebcamCapture from \"./components/WebcamCapture\";\nimport { login, logout, selectUser } from \"./features/appSlice\";\nimport { auth } from \"./firebase\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(\n          login({\n            username: authUser.displayName,\n            profilePic: authUser.photoURL,\n            id: authUser.uid,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <Login />\n        ) : (\n          <>\n            <img\n              className=\"app_logo\"\n              src=\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\"\n              alt=\"\"\n            />\n            <div className=\"app_body\">\n              <div className=\"app_bodyBackground\">\n                <Switch>\n                  <Route exact path=\"/\">\n                    <WebcamCapture />\n                  </Route>\n                  <Route path=\"/preview\">\n                    <Preview />\n                  </Route>\n                  <Route exact path=\"/chats\">\n                    <Chats />\n                  </Route>\n                  <Route path=\"/chats/view\">\n                    <ChatView />\n                  </Route>\n                </Switch>\n              </div>\n            </div>\n          </>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport cameraReducer from '../features/cameraSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera:cameraReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}