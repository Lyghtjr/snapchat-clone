{"version":3,"sources":["features/appSlice.js","features/cameraSlice.js","firebase.js","components/Chat.js","components/Chats.js","components/ChatView.js","components/Login.js","components/Preview.js","components/WebcamCapture.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","user","selectedImage","reducers","login","state","action","payload","logout","selectImage","resetImage","actions","selectUser","app","selectSelectedImage","cameraSlice","cameraImage","setCameraImage","resetCameraImage","selectCameraImage","camera","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","provider","GoogleAuthProvider","Chat","id","username","timestamp","read","imageUrl","profilePic","dispatch","useDispatch","history","useHistory","onClick","collection","doc","set","merge","push","className","Avatar","src","date","Date","toDate","toUTCString","StopRounded","Chats","useState","posts","setPosts","useSelector","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","signOut","SearchOutlined","placeholder","type","ChatBubble","RadioButtonUnchecked","fontSize","ChatView","exit","replace","alt","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","then","result","displayName","photoURL","uid","catch","error","alert","message","Preview","Close","TextFields","CreateOutlined","Note","MusicNote","AttachFile","Crop","Timer","uuid","ref","putString","on","console","log","child","getDownloadURL","url","add","FieldValue","serverTimestamp","Send","videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","useRef","capture","useCallback","imageSrc","current","getScreenshot","audio","screenshotFormat","App","onAuthStateChanged","authUser","exact","path","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9b0a5b6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState:{\r\n    user:null,\r\n    selectedImage:null\r\n  },\r\n  \r\n  reducers: {\r\n        login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout : (state) => {\r\n      state.user = null;\r\n    },\r\n    selectImage:(state,action) => {\r\n      state.selectedImage = action.payload\r\n    },\r\n    resetImage:(state) => {\r\n      state.selectedImage =null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login,logout,selectImage,resetImage } = appSlice.actions;\r\n\r\nexport const selectUser = (state) => state.app.user;\r\n\r\nexport const selectSelectedImage = (state) => state.app.selectedImage;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cameraSlice = createSlice({\r\n  name: 'camera',\r\n  initialState:{\r\n    cameraImage:null,\r\n  },\r\n  \r\n  reducers: {\r\n    setCameraImage: (state, action) => {\r\n      state.cameraImage = action.payload;\r\n    },\r\n    resetCameraImage:(state) => {\r\n        state.cameraImage = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\n\r\nexport const selectCameraImage= (state) => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBUQqM66b_boWYXtYz98xNc4WkaxT6qZ1E\",\r\n  authDomain: \"snapchatclone-react.firebaseapp.com\",\r\n  projectId: \"snapchatclone-react\",\r\n  storageBucket: \"snapchatclone-react.appspot.com\",\r\n  messagingSenderId: \"689605344733\",\r\n  appId: \"1:689605344733:web:e17496b4e0ca4c1311ca34\",\r\n  measurementId: \"G-DW0ZQ5V856\"\r\n  };\r\n  // Initialize Firebase\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth =firebase.auth();\r\n  const storage = firebase.storage();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {db,auth,storage, provider};\r\n\r\n","import { Avatar } from '@material-ui/core';\r\nimport { StopRounded } from '@material-ui/icons';\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport ReactTimeago from 'react-timeago';\r\nimport { selectImage } from '../features/appSlice';\r\nimport { db } from '../firebase';\r\nimport '../styles/Chat.css';\r\n\r\nconst Chat = ({id,username,timestamp,read,imageUrl,profilePic}) => {\r\nconst dispatch = useDispatch();\r\nconst history = useHistory();\r\n    const open = () => {\r\n        if(!read){\r\n            dispatch(selectImage(imageUrl));\r\n            db.collection('posts').doc(id).set({\r\n                read:true,\r\n            },{merge:true});\r\n            history.push('/chats/view');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar className=\"chat_avatar\" src={profilePic}/>\r\n            <div className=\"chat_info\">\r\n                <h4>{username}</h4>\r\n                <p>{ !read && 'Tap to view - '} <ReactTimeago date= {new Date(timestamp?.toDate()).toUTCString()}/></p>\r\n            </div>\r\n            {!read && <StopRounded className=\"chat_readIcon\"/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Avatar } from '@material-ui/core';\r\nimport { ChatBubble, RadioButtonUnchecked, SearchOutlined } from '@material-ui/icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { selectUser } from '../features/appSlice';\r\nimport { resetCameraImage } from '../features/cameraSlice';\r\nimport { auth, db } from '../firebase';\r\nimport '../styles/Chats.css';\r\nimport Chat from './Chat';\r\n\r\nconst Chats = () => {\r\n    const [posts,setPosts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    useEffect(()=>{\r\n        db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot => setPosts(snapshot.docs.map(doc => ({\r\n            id:doc.id,\r\n            data:doc.data()\r\n        }))\r\n        )\r\n        );\r\n    },[]);\r\n\r\n    const takeSnap = () => {\r\n        dispatch(resetCameraImage());\r\n        history.push(\"/\")\r\n    }\r\n    return (\r\n        <div className=\"chats\">\r\n            <div className=\"chats_header\">\r\n                <Avatar src={user.profilePic} onClick={()=> auth.signOut()} className=\"chats_avatar\"/>\r\n                <div className=\"chats_search\">\r\n                    <SearchOutlined className=\"chats_searchIcon\"/>\r\n                    <input placeholder=\"Friends\" type=\"text\"/>\r\n                </div>\r\n                <ChatBubble className=\"chats_chatIcon\"/>\r\n            </div>\r\n\r\n            <div className=\"chats_posts\">\r\n                {\r\n                    posts.map(({id,data:{\r\n                        profilePic,username,timestamp,imageUrl,read }\r\n                    }) => (\r\n                        <Chat\r\n                        key = {id}\r\n                        id = {id}\r\n                        username = {username}\r\n                        timestamp = {timestamp}\r\n                        imageUrl = {imageUrl}\r\n                        read = {read}\r\n                        profilePic = {profilePic}\r\n                        />\r\n                    )\r\n                    )\r\n                }\r\n            </div>\r\n            <RadioButtonUnchecked\r\n            className=\"chats_takePicIcon\"\r\n            onClick={takeSnap}\r\n            fontSize='large'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React, { useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { selectSelectedImage } from \"../features/appSlice\";\r\nimport \"../styles/ChatView.css\";\r\n\r\nconst ChatView = () => {\r\n  const selectedImage = useSelector(selectSelectedImage);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!selectedImage) {\r\n      exit();\r\n    }\r\n  }, [selectedImage]);\r\n\r\n  const exit = () => {\r\n    history.replace(\"/chats\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatView\">\r\n      <img src={selectedImage} alt=\"\" onClick={exit} />\r\n      <div className=\"chatView_timer\">\r\n        <CountdownCircleTimer\r\n          isPlaying\r\n          duration={10}\r\n          strokeWidth={6}\r\n          size={50}\r\n          colors={[\r\n            [\"#004777\", 0.333],\r\n            [\"#F7B801\", 0.333],\r\n            [\"#A30000\", 0.333],\r\n          ]}\r\n        >\r\n          {({ remainingTime }) => {\r\n            if (remainingTime === 0) {\r\n              exit();\r\n            }\r\n            return remainingTime;\r\n          }}\r\n        </CountdownCircleTimer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatView;\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../features/appSlice';\r\nimport { auth, provider } from '../firebase';\r\nimport '../styles/Login.css'\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then((result) => {\r\n            dispatch(login({\r\n                username:result.user.displayName,\r\n                profilePic:result.user.photoURL,\r\n                id:result.user.uid,\r\n            }))\r\n        }).catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_container\">\r\n                <img src='https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg' alt=''/>\r\n                <Button variant='outlined' onClick={signIn}>Sign In</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import {  AttachFile, Close, CreateOutlined, Crop, MusicNote, Note, Send, TextFields, Timer } from '@material-ui/icons';\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { resetCameraImage, selectCameraImage } from '../features/cameraSlice';\r\nimport '../styles/Preview.css';\r\nimport { v4 as uuid} from \"uuid\";\r\nimport {db,storage} from '../firebase';\r\nimport firebase from 'firebase';\r\nimport { selectUser } from '../features/appSlice';\r\n\r\n\r\nconst Preview = () => {\r\n    const cameraImage = useSelector(selectCameraImage);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(()=>{\r\n        if(!cameraImage){\r\n            history.replace('/')\r\n        }\r\n    },[cameraImage,history]);\r\n\r\n    const closePreview = () => {\r\n        dispatch(resetCameraImage());\r\n     \r\n    }\r\n\r\n    const sendPost = () => {\r\n        const id = uuid();\r\n        const uploadTask = storage.ref(`posts/${id}`).putString(cameraImage,\"data_url\");\r\n\r\n        uploadTask.on('state_changed',null,(error)=>{\r\n            console.log(error);\r\n        },\r\n        () => {\r\n            storage\r\n            .ref('posts')\r\n            .child(id)\r\n            .getDownloadURL()\r\n            .then((url)=>{\r\n                db.collection('posts').add({\r\n                    imageUrl:url,\r\n                    username:'Abhi',\r\n                    read:false,\r\n                    profilePic:user.profilePic,\r\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n                });\r\n                history.replace(\"/chats\");\r\n            })\r\n        }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <Close className=\"preview_close\" onClick={closePreview}/>\r\n            <div className=\"preview_toolbarRight\">\r\n                <TextFields/>\r\n                <CreateOutlined/>\r\n                <Note/>\r\n                <MusicNote/>\r\n                <AttachFile/>\r\n                <Crop/>\r\n                <Timer/>\r\n\r\n            </div>\r\n            <img src={cameraImage} alt=\"\"/>\r\n            <div onClick={sendPost} className=\"preview_footer\">\r\n                <h2>Send Now</h2>\r\n                <Send fontSize=\"small\" className=\"preview_sendIcon\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import {  RadioButtonUnchecked } from '@material-ui/icons';\r\nimport React, { useRef , useCallback, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Webcam from 'react-webcam'\r\nimport { setCameraImage } from '../features/cameraSlice';\r\nimport '../styles/WebcamCapture.css';\r\n\r\nconst videoConstraints = {\r\n    width:250,\r\n    height:400,\r\n    facingMode:\"user\",\r\n}\r\n\r\nconst WebcamCapture = () => {\r\n    const webcamRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    \r\n    const capture = useCallback(\r\n        () => {\r\n          const imageSrc = webcamRef.current.getScreenshot();\r\n          dispatch(setCameraImage(imageSrc));\r\n         history.push('/preview');\r\n        },\r\n        [webcamRef],\r\n    )\r\n    return (\r\n        <div className=\"webcamCapture\">\r\n            <Webcam\r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={videoConstraints.width}\r\n                videoConstraints={videoConstraints}\r\n            />\r\n\r\n            <RadioButtonUnchecked className=\"webcamCapture_button\" onClick={capture} fontSize=\"large\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport Chats from \"./components/Chats\";\r\nimport ChatView from \"./components/ChatView\";\r\nimport Login from \"./components/Login\";\r\nimport Preview from \"./components/Preview\";\r\nimport WebcamCapture from \"./components/WebcamCapture\";\r\nimport { login, logout, selectUser } from \"./features/appSlice\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            username: authUser.displayName,\r\n            profilePic: authUser.photoURL,\r\n            id: authUser.uid,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <Login />\r\n        ) : (\r\n          <>\r\n            <img\r\n              className=\"app_logo\"\r\n              src=\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\"\r\n              alt=\"\"\r\n            />\r\n            <div className=\"app_body\">\r\n              <div className=\"app_bodyBackground\">\r\n                <Switch>\r\n                  <Route exact path=\"/\">\r\n                    <WebcamCapture />\r\n                  </Route>\r\n                  <Route path=\"/preview\">\r\n                    <Preview />\r\n                  </Route>\r\n                  <Route exact path=\"/chats\">\r\n                    <Chats />\r\n                  </Route>\r\n                  <Route path=\"/chats/view\">\r\n                    <ChatView />\r\n                  </Route>\r\n                </Switch>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from '../features/appSlice';\r\nimport cameraReducer from '../features/cameraSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    camera:cameraReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}